from fastapi import APIRouter, Request, Form
from fastapi.responses import HTMLResponse, StreamingResponse, Response
from fastapi.templating import Jinja2Templates
from datetime import datetime
import json

from app.core.config import get_settings
from app.services.research_pipeline import run_full_research
from app.utils.formatting import process_markdown_to_html
from app.utils.pdf import generate_pdf

router = APIRouter(tags=["web"])
templates = Jinja2Templates(directory="app/templates")


@router.get("/", response_class=HTMLResponse)
def index(request: Request):
    settings = get_settings()
    return templates.TemplateResponse(
        "index.html",
        {"request": request, "app_name": settings.app_name},
    )


@router.post("/research", response_class=HTMLResponse)
def run_research(request: Request, query: str = Form(...)):
    result = run_full_research(query)
    html_content = process_markdown_to_html(result["report"])

    return templates.TemplateResponse(
        "report.html",
        {
            "request": request,
            "app_name": get_settings().app_name,
            "query": query,
            "report_markdown": result["report"],
            "report_html": html_content,
            "generated_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        },
    )


@router.post("/download/markdown")
def download_markdown(query: str = Form(...), report: str = Form(...)):
    content = f"""# ðŸ”¬ AI Research Report

**Research Query:** {query}  
**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**Powered by:** LLaMA-3.3-70B + Tavily Advanced Search

---

{report}

---

## Report Metadata
- **Search Engine:** tavily_advanced
- **AI Model:** llama-3.3-70b-versatile
- **Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

*Generated by AI Research Assistant with comprehensive web search capabilities.*
"""
    headers = {
        "Content-Disposition": f'attachment; filename="research_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.md"'
    }
    return Response(content=content, media_type="text/markdown", headers=headers)


@router.post("/download/pdf")
def download_pdf(query: str = Form(...), report: str = Form(...)):
    pdf_buffer = generate_pdf(report, query)
    headers = {
        "Content-Disposition": f'attachment; filename="research_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf"'
    }
    return StreamingResponse(pdf_buffer, media_type="application/pdf", headers=headers)


@router.post("/download/json")
def download_json(query: str = Form(...), report: str = Form(...)):
    payload = {
        "query": query,
        "report": report,
        "timestamp": datetime.now().isoformat(),
        "metadata": {
            "ai_model": "llama-3.3-70b-versatile",
            "search_engine": "tavily_advanced",
        },
    }
    body = json.dumps(payload, indent=2)
    headers = {
        "Content-Disposition": f'attachment; filename="research_data_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json"'
    }
    return Response(content=body, media_type="application/json", headers=headers)

